/*
 * Copyright (c) 2015-2019, Inversoft Inc., All Rights Reserved
 */
savantVersion = "1.0.0"

project(group: "com.inversoft", name: "restify", version: "3.3.0", licenses: ["ApacheV2_0"]) {
  workflow {
    standard()
  }

  publishWorkflow {
    subversion(repository: "http://svn.inversoft.org/savant")
  }

  dependencies {
    group(name: "compile") {
      dependency(id: "com.fasterxml.jackson.core:jackson-core:2.10.1")
      dependency(id: "com.fasterxml.jackson.core:jackson-databind:2.10.1")
      dependency(id: "com.fasterxml.jackson.core:jackson-annotations:2.10.1")
      dependency(id: "com.inversoft:jackson5:2.4.2")
      dependency(id: "org.slf4j:slf4j-api:1.7.7")
    }
    group(name: "csharp-compile") {
      dependency(id: "com.newtonsoft:Newtonsoft.Json:8.0.3+net20:dll")
    }
    group(name: "csharp-test-compile") {
      dependency(id: "org.nunit:nunit.framework:2.6.4:dll")
    }
    group(name: "test-compile", export: false) {
      dependency(id: "org.testng:testng:6.8.7")
    }
  }

  publications {
    standard()
    //main {
      //publication(name: "restify", type: "dll", file: "build/dlls/restify.dll")
    //}
  }
}

// Plugins
dependency = loadPlugin(id: "org.savantbuild.plugin:dependency:1.0.2")
java = loadPlugin(id: "org.savantbuild.plugin:java:1.0.2")
javaTestNG = loadPlugin(id: "org.savantbuild.plugin:java-testng:1.0.2")
idea = loadPlugin(id: "org.savantbuild.plugin:idea:1.0.1")
release = loadPlugin(id: "org.savantbuild.plugin:release-git:${savantVersion}")
//csharp = loadPlugin(id: "org.savantbuild.plugin:csharp:0.1.0-{integration}")
//csharpNUnit = loadPlugin(id: "org.savantbuild.plugin:csharp-nunit:0.1.0-{integration}")

java.settings.javaVersion = "1.8"
javaTestNG.settings.javaVersion = "1.8"
//csharp.settings.sdkVersion = "2.0"
//csharp.settings.compilerExecutable = "gmcs"
//csharp.settings.mainDependencies = [
//    [group: "csharp-compile", transitive: false, fetchSource: false]
//]
//csharp.settings.testDependencies = [
//    [group: "csharp-compile", transitive: false, fetchSource: false],
//    [group: "csharp-test-compile", transitive: false, fetchSource: false]
//]
//csharp.settings.references = ["System.Web"]
//csharpNUnit.settings.sdkVersion = "2.0"
//csharpNUnit.settings.nunitVersion = "2.6.4"
//csharpNUnit.settings.dependencies = [
//    [group: "csharp-compile", transitive: true, fetchSource: false],
//    [group: "csharp-test-compile", transitive: true, fetchSource: false]
//]


target(name: "clean", description: "Cleans the project") {
  java.clean()
  //csharp.clean()
}

target(name: "compile", description: "Compiles the project") {
  java.compile()
  //csharp.compile()
}

target(name: "jar", description: "JARs the project", dependsOn: ["compile"]) {
  java.jar()
}

target(name: "test", description: "Runs the project's tests", dependsOn: ["jar"]) {
  javaTestNG.test()
  //csharpNUnit.test()
}

target(name: "doc", description: "Generate the project's JavaDoc", dependsOn: ["jar"]) {
  java.document()
  //csharp.exportDocs()
}

target(name: "int", description: "Releases a local integration build of the project", dependsOn: ["test"]) {
  dependency.integrate()
}

target(name: "list-unused-dependencies", description: "Lists the unused dependencies of the project", dependsOn: ["compile"]) {
  dependency.listUnusedDependencies()
}

target(name: "release", description: "Releases a full version of the project", dependsOn: ["clean", "test"]) {
  release.release()
}

target(name: "idea", description: "Updates the IntelliJ IDEA module file") {
  idea.iml()
}

target(name: "publish", description: "Publish to MVN repo", dependsOn: ["clean", "test"]) {
  if (new ProcessBuilder('mvn', 'deploy', '-Prelease').inheritIO().start().waitFor() != 0) {
    fail("deploy failed")
  }
}

